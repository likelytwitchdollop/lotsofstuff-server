{
	"Create model using interface": {
		"scope": "typescript",
		"prefix": "model using interface",
		"body": [
			"import mongoose, { Schema } from 'mongoose'",
			"",
			"export interface I${1} { }",
			"",
			"const ${1}Schema: Schema = new Schema({}, {",
			"  timestamps: true,",
			"  versionKey: false,",
			"})",
			"",
			"const ${1} = mongoose.model<I${1}>(",
			"  '${1}',",
			"  ${1}Schema,",
			"  '${1}'",
			")",
			"",
			"export default ${1}",
			"",
		],
	},
	"Create routes": {
		"scope": "typescript",
		"prefix": "routes",
		"body": [
			"import express from 'express'",
			"",
			"import ${1} from './${2}.controller'",
			"",
			"const router = express.Router()",
			"",
			"router.get('/', ${3})",
			"",
			"export default router",
		],
	},
	"Create a contoller file": {
		"scope": "typescript",
		"prefix": "controller (crud)",
		"body": [
			"import { NextFunction, Request, Response } from 'express'",
			"import HttpStatusCode from 'lib/HttpStatusCode'",
			"",
			"export const ${1} = async (req: Request, res: Response, next: NextFunction) => {",
			"	try {",
			"		return {}",
			"	} catch (error) {",
			"		return next(error)",
			"	}",
			"}",
		],
	},
	"Create controller (method)": {
		"scope": "typescript",
		"prefix": "controller (method)",
		"body": [
			"export const ${1} = async (req: Request, res: Response, next: NextFunction) => {",
			"	try {",
			"		return {}",
			"	} catch (error) {",
			"		return next(error)",
			"	}",
			"}",
		],
	},
	"Create types for controller request type": {
		"scope": "typescript",
		"prefix": "controller request type",
		"body": [
			"type ${1}ReqParams = {}",
			"type ${1}ReqQuery = {}",
			"type ${1}ReqBody = {}",
			"type ${1}ResBody = {}",
			"",
			"type ${1}Request = Request<${1}ReqParams, ${1}ResBody, ${1}ReqBody, ${1}ReqQuery>",
		],
	},
}
